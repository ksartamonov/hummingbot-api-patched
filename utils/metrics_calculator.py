import logging
import numpy as np
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)


def calculate_performance_ratios(results: dict, executors: list | None = None) -> dict:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç Sortino –∏ Calmar.
    - returns —Å–¥–µ–ª–∫–∏ -> –¥–æ–ª–∏
    - —á–∞—Å—Ç–æ—Ç–∞ –≥–æ–¥–æ–≤–∞—è –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥–∞
    """
    try:
        net_pnl_pct = float(results.get("net_pnl_pct", 0) or 0.0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        start_ts = results.get("start_time")
        end_ts = results.get("end_time")
        n_days = 0.0
        
        if start_ts and end_ts and end_ts > start_ts:
            n_days = (end_ts - start_ts) / 86400.0  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –¥–Ω–∏
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å n_days –Ω–∞–ø—Ä—è–º—É—é
            n_days = float(results.get("n_days", 0) or 0.0)
        
        print(f"üîç DEBUG: Starting performance ratios calculation")
        print(f"üîç DEBUG: net_pnl_pct: {net_pnl_pct}, n_days: {n_days}, start_ts: {start_ts}, end_ts: {end_ts}")

        # ---- Sharpe Ratio ----
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ PnL
        if n_days and n_days > 0:
            # –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            annual_return = (net_pnl_pct / 100.0) * (365.0 / n_days)
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 1% –≤ –¥–µ–Ω—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
            daily_volatility = 0.01
            annual_volatility = daily_volatility * np.sqrt(365.0)
            sharpe_ratio = annual_return / annual_volatility if annual_volatility > 0 else 0.0
            print(f"üîç DEBUG: Sharpe calculation - annual_return: {annual_return:.6f}, annual_volatility: {annual_volatility:.6f}, Sharpe: {sharpe_ratio:.6f}")
        else:
            sharpe_ratio = 0.0
            print(f"üîç DEBUG: Sharpe - no time data, setting to 0")

        # ---- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ returns –¥–ª—è Sortino –∏ Calmar ----
        r_list = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å executors, –∏–∑–≤–ª–µ–∫–∞–µ–º returns –∏–∑ –Ω–∏—Ö
        if executors and len(executors) > 0:
            for executor in executors:
                pnl_pct = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ executor —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
                if isinstance(executor, dict):
                    pnl_pct = executor.get("net_pnl_pct", 0)
                else:
                    # –≠—Ç–æ –æ–±—ä–µ–∫—Ç ExecutorInfo, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                    pnl_pct = getattr(executor, "net_pnl_pct", 0)
                    # –ï—Å–ª–∏ —ç—Ç–æ Decimal, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
                    if hasattr(pnl_pct, '__float__'):
                        pnl_pct = float(pnl_pct)
                
                if pnl_pct is not None and pnl_pct != 0:
                    r_list.append(float(pnl_pct) / 100.0)  # –≤ –¥–æ–ª—è—Ö
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç executors, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π PnL
            if net_pnl_pct != 0:
                r_list.append(float(net_pnl_pct) / 100.0)  # –≤ –¥–æ–ª—è—Ö

        r = np.asarray(r_list, dtype=float)
        print(f"üîç DEBUG: Prepared returns array: {len(r)} returns, sample: {r[:5] if len(r) > 0 else 'empty'}")

        # ---- –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–æ–¥–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É ----
        # –ï—Å–ª–∏ –∑–Ω–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö ‚Äî –æ—Ü–µ–Ω–∏–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∫ (–∫–æ–ª-–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –¥–µ–Ω—å) * 365
        if n_days and n_days > 0 and len(r) > 1:
            periods_per_year = (len(r) / n_days) * 365.0
        else:
            # —Ä–∞–∑—É–º–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ–º
            periods_per_year = 252.0
        
        print(f"üîç DEBUG: Estimated periods_per_year: {periods_per_year:.2f}")

        # ---- Sortino ----
        if len(r) > 1:
            target = 0.0
            downside = np.minimum(r - target, 0.0)
            dd = float(np.sqrt(np.mean(np.square(downside))))
            mu_excess = float(np.mean(r - target))
            if dd > 0:
                sortino_ratio = (mu_excess / dd) * np.sqrt(periods_per_year)
                print(f"üîç DEBUG: Sortino calculation - mu_excess: {mu_excess:.6f}, dd: {dd:.6f}, periods_per_year: {periods_per_year:.2f}, Sortino: {sortino_ratio:.6f}")
            else:
                sortino_ratio = np.inf if mu_excess > 0 else 0.0
                print(f"üîç DEBUG: Sortino - no downside deviation, setting to {'inf' if mu_excess > 0 else '0'}")
        else:
            sortino_ratio = 0.0  # –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –≤–µ—Ä–Ω—ë–º 0
            print(f"üîç DEBUG: Sortino - insufficient data ({len(r)} returns), setting to 0")

        # ---- Calmar ----
        # CAGR
        if n_days and n_days > 0:
            total_return = float(net_pnl_pct) / 100.0
            cagr = (1.0 + total_return) ** (365.0 / n_days) - 1.0
            print(f"üîç DEBUG: Calmar CAGR calculation - total_return: {total_return:.6f}, n_days: {n_days:.2f}, CAGR: {cagr:.6f}")
        elif len(r) > 0:
            total_return = float(np.prod(1.0 + r) - 1.0)
            # –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è: –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≥–æ–¥–æ–≤–æ–π —á–µ—Ä–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç–æ—Ç—É
            cagr = (1.0 + total_return) ** (periods_per_year / max(len(r), 1)) - 1.0
            print(f"üîç DEBUG: Calmar CAGR from returns - total_return: {total_return:.6f}, cagr: {cagr:.6f}")
        else:
            cagr = 0.0
            print(f"üîç DEBUG: Calmar CAGR - no data, setting to 0")

        # Max Drawdown
        max_dd = 0.0
        if len(r) > 1:
            cumulative = np.cumprod(1.0 + r)
            running_max = np.maximum.accumulate(cumulative)
            drawdowns = (cumulative - running_max) / running_max
            max_dd = float(np.min(drawdowns))
            print(f"üîç DEBUG: Calmar MaxDD calculation - max_dd: {max_dd:.6f}")
        elif len(r) == 1 and r[0] < 0:
            max_dd = float(r[0])
            print(f"üîç DEBUG: Calmar MaxDD from single negative return: {max_dd:.6f}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å–∞–¥–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É
            max_dd = -0.01  # 1% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            print(f"üîç DEBUG: Calmar MaxDD - no data, using conservative estimate: {max_dd:.6f}")

        # Calmar Ratio
        if max_dd < 0:
            calmar_ratio = cagr / abs(max_dd)
            print(f"üîç DEBUG: Calmar ratio calculation - cagr: {cagr:.6f}, max_dd: {max_dd:.6f}, Calmar: {calmar_ratio:.6f}")
        else:
            calmar_ratio = np.inf if cagr > 0 else 0.0
            print(f"üîç DEBUG: Calmar ratio - MaxDD is 0, setting to {'inf' if cagr > 0 else '0'}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ ¬´–æ–±–Ω—É–ª–µ–Ω–∏—è¬ª inf ‚Äî —Ç–∞–∫ —á–µ—Å—Ç–Ω–µ–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        result = {
            "sharpe_ratio": sharpe_ratio if np.isfinite(sharpe_ratio) else 0.0,
            "sortino_ratio": sortino_ratio,
            "calmar_ratio": calmar_ratio,
        }
        
        print(f"üîç DEBUG: Final ratios - Sharpe: {result['sharpe_ratio']:.6f}, Sortino: {result['sortino_ratio']}, Calmar: {result['calmar_ratio']}")
        
        return result
        
    except Exception as e:
        logger.error(f"Error calculating performance ratios: {e}")
        print(f"üîç DEBUG: Error calculating ratios: {e}")
        return {
            "sharpe_ratio": 0.0,
            "sortino_ratio": 0.0,
            "calmar_ratio": 0.0,
        }
